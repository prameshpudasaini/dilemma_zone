import os
import pandas as pd
import statistics as st

os.chdir(r"D:\GitHub\dilemma_zone")

# define class to subtract timestamps
class Vector():
    def __init__(self, data):
        self.data = data
    def __repr__(self):
        return repr(self.data)
    def __sub__(self, other):
        return list((a-b).total_seconds() for a, b in zip(self.data, other.data))

path = "ignore\calibration_data"

# select period and file
def getFileDataSet(year, month, day, from_hour, from_min, to_hour, to_min):
    file = str(year) + str(month).zfill(2) + str(day).zfill(2) + '_' + str(from_hour).zfill(2) + str(from_min).zfill(2) + '_' + str(to_hour).zfill(2) + str(to_min).zfill(2)
    df = pd.read_csv(os.path.join(path, file + '_filtered.txt'), sep = '\t')
    df.TimeStamp = pd.to_datetime(df.TimeStamp, format = '%Y-%m-%d %H:%M:%S.%f').sort_values()
    return df

df1 = getFileDataSet(2022, 12, 6, 7, 45, 8, 15)
df2 = getFileDataSet(2022, 12, 6, 8, 45, 9, 15)
df3 = getFileDataSet(2022, 12, 14, 7, 45, 8, 15)
df4 = getFileDataSet(2022, 12, 14, 8, 45, 9, 15)
df5 = getFileDataSet(2022, 12, 14, 9, 45, 10, 15)
df6 = getFileDataSet(2023, 3, 27, 14, 15, 18, 45)

df = list([df1, df2, df3, df4, df5, df6])

# =============================================================================
# result of actuations on left lane
# =============================================================================

left_result = {
    'left1': {
        100399: 300400,
        100447: 300449,
        100799: 000000,
    },
    'left2': {
        100263: 000000,
        100393: 300401,
        100397: 300405,
        100399: 000000,
    },
    'left3': {
        100677: 000000,
        100844: 000000
    },
    'left4': {
        100519: 000000
    },
    'left5': {
        100074: 000000,
        100303: 000000,
        100309: 300312,
        100382: 000000
    },
    'left6': {
        100052: 300057,
        100055: 300060,
        100308: 000000,
        100490: 000000,
        100496: 000000,
        100512: 300518,
        100714: 000000,
        100723: 000000,
        100792: 000000,
        100797: 000000,
        100910: 000000,
        100913: 000000,
        101070: 000000,
        101079: 000000,
        101171: 000000,
        101175: 301185,
        101184: 301192,
        101262: 000000,
        101432: 000000,
        101438: 000000,
        101444: 000000,
        101529: 000000,
        101534: 301543,
        101537: 000000,
        101740: 000000,
        101858: 000000,
        101859: 000000,
        101862: 000000,
        101976: 000000,
        101982: 000000,
        101990: 000000,
        101995: 000000,
        102100: 000000,
        102626: 000000,
        102627: 000000,
        102628: 000000,
        102629: 000000,
        102631: 000000,
        102632: 000000,
        102700: 000000,
        102711: 000000,
        102839: 000000,
        102985: 000000,
        103088: 000000,
        103092: 000000,
        103221: 000000,
        103225: 000000,
        103226: 000000,
        103449: 000000,
        103538: 303541,
        103542: 000000,
        103679: 000000,
        103805: 000000,
        103809: 000000,
        103965: 000000,
        103968: 000000,
        103971: 000000,
        104104: 000000,
        104206: 000000,
        104409: 304418,
        104413: 000000,
        104422: 000000,
        104561: 000000,
        104698: 304705,
        104933: 304935,
        104934: 000000,
        105213: 000000,
        105223: 000000,
        105445: 000000,
        105450: 000000,
        105454: 000000,
        105456: 000000,
        105460: 000000,
        105545: 000000,
        105547: 000000,
        105551: 000000,
        105847: 000000,
        105855: 000000,
        105856: 000000,
        105976: 000000,
        105979: 000000,
        105986: 000000,
        106118: 000000,
        106123: 000000,
        106127: 000000,
        106312: 000000,
        106313: 000000,
        106314: 000000,
        106315: 000000,
        106415: 000000,
        106421: 000000,
        106426: 000000,
        106431: 000000,
        106435: 000000,
        106551: 306554,
        106731: 306734,
        106853: 000000,
        106857: 000000,
        106862: 000000,
        106869: 000000,
        107168: 000000,
        107173: 307182,
        107175: 000000,
        107295: 000000,
        107297: 307302,
        107402: 000000,
        107621: 000000,
        107861: 000000,
        108051: 000000,
        108063: 000000,
        108189: 000000,
        108194: 000000,
        108488: 000000,
        108645: 000000,
        108646: 000000,
        108647: 000000,
        108843: 000000,
        109084: 000000,
        109088: 000000,
        109089: 000000,
        109091: 000000,
        109272: 000000,
        109273: 000000,
        109363: 000000,
        109623: 000000,
        109632: 000000,
        109734: 000000,
        109834: 000000,
        109837: 000000,
        109908: 309915,
        109990: 000000,
        109998: 000000,
        110002: 000000,
        110155: 000000,
        110157: 000000,
        110321: 000000,
        110323: 000000,
        110712: 000000,
        110713: 000000
    }
}

# check acutations are same on data frame and left result
data_set = set(df6[df6.Parameter == 29].ID)
manual_set = set(left_result['left6'].keys())
print(data_set == manual_set)

# count total number of left-turn actuations
total_count, left_count = 0, 0
for key, value in left_result.items():
    for inner_key, inner_value in value.items():
        if inner_value != 000000:
            left_count+= 1
        total_count += 1
        
print("Total count of left-turn actuations: ", left_count)
print("Percentage of left-turning vehicles on left lane: ", round(left_count/total_count*100, 1))

# =============================================================================
# calibration of parameters for adv to left-turn lane
# =============================================================================

i = 0 # counter for data frame
travel_time = [] # stores travel time from adv to rear det
file_left = open("data/calibration/calibration_left_turn.txt", 'w')

for key, value in left_result.items():
    for inner_key, inner_value in value.items():
        xdf = df[i]
        
        if inner_value != 000000: # consider only key-value pairs with left-turn
            adv_time = xdf[xdf.ID == inner_key].TimeStamp
            left_time = xdf[xdf.ID == inner_value].TimeStamp
            
            diff = (Vector(left_time) - Vector(adv_time)).pop()
            travel_time.append(diff)
            
            file_left.write(str(diff)+"\n")
            
    i += 1
file_left.close()

# =============================================================================
# result of actuations on all lane
# =============================================================================

thru_result = {
    'thru1': {
        200005: 100003,
        200099: 100097,
        200163: 100161,
        200165: 100162,
        200167: 100164,
        200226: 100225,
        200453: 100448,
        200544: 100543,
        200590: 100585,
        200592: 100587,
        200594: 100588,
        200662: 100661,
        200724: 100722
    },
    'thru2': {
        200004: 100003,
        200112: 100111,
        200159: 100158,
        200266: 100263,
        200400: 100392,
        200402: 100395,
        200407: 100399,
        200409: 100404,
        200489: 100487,
        200490: 100488,
        200593: 100591
    },
    'thru3': {
        200078: 100075,
        200141: 100140,
        200194: 100193,
        200323: 100321,
        200378: 100375,
        200566: 100564,
        200623: 100622,
        200678: 100677,
        200748: 100745,
        200798: 100796,
        200799: 100797
    },
    'thru4': {
        200325: 100324,
        200327: 100326,
        200521: 100518,
        200522: 100519,
        200523: 100520
    },
    'thru5': {
        200001: 100000,
        200041: 100040,
        200175: 100172,
        200306: 100303,
        200383: 100382,
        200457: 100455,
        200458: 100456,
        200572: 100571
    },
    'thru6': {
        200054: 100051,
        200170: 100169,
        200239: 100237,
        200309: 100307,
        200311: 100308,
        200505: 100492,
        200508: 100495,
        200515: 100500,
        200504: 100493,
        200511: 100498,
        200513: 100503,
        200517: 100507,
        200509: 100496,
        200725: 100722,
        200727: 100723,
        200810: 100798,
        200800: 100793,
        200799: 100792,
        200801: 100795, # lane change
        200806: 100797,
        200912: 100910,
        200914: 100911,
        201078: 101075,
        201082: 101079,
        201186: 101177,
        201190: 101182,
        201189: 101180,
        201194: 101183,
        201197: 101188, # lane change
        201361: 101358, # RT veh -> right
        201362: 101359,
        201445: 101433,
        201450: 101436,
        201448: 101437,
        201451: 101442,
        201456: 101447,
        201446: 101438,
        201454: 101444,
        201536: 101525,
        201539: 101531,
        201533: 101522,
        201641: 101640,
        201743: 101742,
        201867: 101860,
        201861: 101858,
        201871: 101862,
        201863: 101859, # lane change
        201994: 101984,
        202002: 101991,
        201992: 101977,
        201993: 101983,
        201996: 101987, # potential lane change
        202006: 101997,
        202001: 101990,
        202103: 102098,
        202106: 102102,
        202105: 102101,
        202104: 102100,
        202416: 102415,
        202511: 102506,
        202709: 102704,
        202720: 102712,
        202717: 102713,
        202718: 102711,
        202848: 102834,
        202850: 102837,
        202845: 102835,
        202847: 102838,
        202851: 102844,
        202853: 102849,
        202846: 102839,
        202936: 102935,
        202986: 102984,
        202992: 102987,
        202991: 102985,
        203091: 103087,
        203098: 103090,
        203094: 103089,
        203093: 103088,
        203100: 103092,
        203224: 103220,
        203351: 103349,
        203451: 103449,
        203550: 103542,
        203677: 103668,
        203680: 103673,
        203681: 103675,
        203676: 103664,
        203678: 103672,
        203811: 103806,
        203810: 103801,
        203812: 103807,
        203813: 103805,
        203814: 103809,
        203975: 103966,
        203980: 103970,
        203985: 103974,
        203976: 103967,
        203992: 103979,
        203978: 103971,
        204112: 104108,
        204114: 104113,
        204111: 104107,
        204210: 104207,
        204208: 104206,
        204303: 104300,
        204304: 104301,
        204424: 104416,
        204420: 104414,
        204429: 104419,
        204421: 104413,
        204432: 104422,
        204554: 104542,
        204556: 104547,
        204560: 104549,
        204566: 104552,
        204555: 104546,
        204559: 104548,
        204563: 104553,
        204708: 104700,
        204712: 104706,
        204941: 104934,
        205072: 105063,
        205076: 105068,
        205078: 105070,
        205071: 105061,
        205074: 105065,
        205082: 105073,
        205219: 105206,
        205224: 105212,
        205227: 105217,
        205222: 105209,
        205221: 105213,
        205230: 105223,
        205459: 105449,
        205463: 105451,
        205469: 105458,
        205465: 105455,
        205472: 105457,
        205461: 105450,
        205464: 105454,
        205468: 105456,
        205557: 105548,
        205556: 105546,
        205559: 105549,
        205560: 105558,
        205555: 105547,
        205853: 105848,
        205854: 105850,
        205852: 105847,
        205859: 105855,
        205991: 105982,
        205998: 105987,
        205988: 105979,
        205996: 105986,
        206129: 106119,
        206131: 106121,
        206134: 106125,
        206130: 106118,
        206132: 106123,
        206135: 106127,
        206228: 106227,
        206428: 106417,
        206441: 106427,
        206429: 106419,
        206434: 106424, # two actuations
        206443: 106432,
        206430: 106415,
        206433: 106421,
        206436: 106426,
        206552: 106549,
        206662: 106660,
        206730: 106729,
        206739: 106732,
        206867: 106856,
        206877: 106860,
        206865: 106858,
        206874: 106864, # lane change
        206863: 106853,
        206868: 106857,
        206875: 106862,
        207171: 107165,
        207178: 107170,
        207172: 107167,
        207186: 107174,
        207299: 107292,
        207300: 107295,
        207407: 107404,
        207406: 107403,
        207405: 107402,
        207511: 107510,
        207627: 107622,
        207623: 107621,
        207771: 107769,
        207773: 107770,
        207862: 107861,
        208067: 108059,
        208060: 108054,
        208062: 108057,
        208073: 108061,
        208074: 108063,
        208193: 108185,
        208195: 108187,
        208199: 108190,
        208197: 108189,
        208203: 108194,
        208312: 108310,
        208314: 108311,
        208499: 108490,
        208497: 108489,
        208495: 108488,
        208583: 108582,
        208581: 108580,
        208848: 108842,
        208850: 108845,
        208852: 108843,
        208990: 108980,
        208992: 108988,
        208993: 108991, # lane change
        209092: 109090,
        209193: 109190,
        209274: 109272,
        209278: 109273,
        209368: 109364, # lane change
        209543: 109541,
        209630: 109620, # two actuations
        209644: 109633,
        209627: 109619,
        209634: 109625,
        209638: 109628,
        209631: 109623,
        209640: 109632,
        209736: 109734,
        209836: 109834,
        209838: 109837,
        209914: 109909,
        209922: 109912,
        209916: 109907,
        209920: 109910,
        210001: 109993,
        210006: 109997,
        210011: 110003,
        209999: 109992,
        210004: 109995,
        210013: 110005,
        210000: 109990,
        210007: 109998,
        210159: 110156,
        210322: 110321,
        210327: 110323,
        210438: 110429,
        210542: 110540,
        210663: 110659,
        210717: 110714,
        210715: 110712
    }
}

# count total number of thru actuations
count = 0
for key, value in thru_result.items():
    for inner_key, inner_value in value.items():
        count += 1
        
print("Total number of through actuations: ", count)

# =============================================================================
# calibration of parameters for adv to stop-bar
# =============================================================================

i = 0 # counter for data frame
travel_time = [] # stores travel time from adv to stop-bar det
file_thru = open("data/calibration/calibration_thru.txt", 'w')

for key, value in thru_result.items():
    for inner_key, inner_value in value.items():
        xdf = df[i]        
        adv_time = xdf[xdf.ID == inner_value].TimeStamp
        thru_time = xdf[xdf.ID == inner_key].TimeStamp
        
        diff = (Vector(thru_time) - Vector(adv_time)).pop()
        travel_time.append(diff)
        
        SCA = xdf[xdf.ID == inner_key].SCA.values[0] # signal change at stop-bar
        if SCA == 'RG': # stopping vehicle            
            file_thru.write(str(diff)+"\t"+"stop"+"\n")
        else:
            file_thru.write(str(diff)+"\t"+"go"+"\n")
            
    i += 1
file_thru.close()
